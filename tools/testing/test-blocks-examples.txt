TEST-BLOCKS API EXAMPLES
========================

All examples assume localhost:5000 and valid API keys in .env

---

BASIC TESTS
-----------

# Gemini 2.5 Pro - Temperature 0.0 (Most Deterministic)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0"

# GPT-5 - Medium Reasoning
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=medium"

# Claude Sonnet 4.5 - Temperature 0.2
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=claude&llmParam=0.2"

---

TEMPERATURE TESTING (Gemini/Claude)
-----------------------------------

# Gemini - Temperature 0.0 (Deterministic)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0"

# Gemini - Temperature 0.2 (Slightly Creative)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.2"

# Gemini - Temperature 0.5 (Balanced)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.5"

# Gemini - Temperature 1.0 (Maximum Creativity)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=1.0"

# Claude - Temperature 0.0
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=claude&llmParam=0.0"

# Claude - Temperature 0.3
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=claude&llmParam=0.3"

---

REASONING EFFORT TESTING (GPT-5)
---------------------------------

# GPT-5 - Minimal Reasoning (Fastest)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=minimal"

# GPT-5 - Low Reasoning
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=low"

# GPT-5 - Medium Reasoning (Recommended)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=medium"

# GPT-5 - High Reasoning (Most Thoughtful)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=high"

---

RANGE TESTING
-------------

# Short Range (5-10 min)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0&minDistance=5&maxDistance=10"

# Medium Range (10-15 min)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0&minDistance=10&maxDistance=15"

# Long Range (15-25 min)
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0&minDistance=15&maxDistance=25"

---

GEOGRAPHIC TESTING
------------------

# Dallas Downtown
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0"

# DFW Airport Area
curl "http://localhost:5000/api/test-blocks?lat=32.8998&lng=-97.0403&llmModel=gemini&llmParam=0.0"

# Frisco (North Dallas)
curl "http://localhost:5000/api/test-blocks?lat=33.1507&lng=-96.8236&llmModel=gemini&llmParam=0.0"

# Plano (East Dallas)
curl "http://localhost:5000/api/test-blocks?lat=33.0198&lng=-96.6989&llmModel=gemini&llmParam=0.0"

# Fort Worth Downtown
curl "http://localhost:5000/api/test-blocks?lat=32.7555&lng=-97.3308&llmModel=gemini&llmParam=0.0"

---

USER ID TESTING (Personalization)
----------------------------------

# User: driver_123
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0&userId=driver_123"

# User: driver_456
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0&userId=driver_456"

---

SNAPSHOT BINDING (Reproducible Tests)
--------------------------------------

# First, create a snapshot
curl "http://localhost:5000/api/location/snapshot?lat=32.7767&lng=-96.7970&userId=test_user"
# Returns: {"snapshot_id": "abc123..."}

# Then, bind test to that snapshot
curl -H "X-Snapshot-Id: abc123..." \
  "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0"

---

COMPARATIVE TESTING (Same Conditions, Different Models)
-------------------------------------------------------

# Test all 3 models with identical context
LAT=32.7767
LNG=-96.7970

# Gemini
curl "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=gemini&llmParam=0.0" > gemini_result.json

# GPT-5
curl "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=gpt-5&llmParam=medium" > gpt5_result.json

# Claude
curl "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=claude&llmParam=0.0" > claude_result.json

# Compare
diff gemini_result.json gpt5_result.json
diff gemini_result.json claude_result.json

---

PERFORMANCE BENCHMARKING
------------------------

# Time Gemini response
time curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0"

# Time GPT-5 response
time curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gpt-5&llmParam=medium"

# Time Claude response
time curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=claude&llmParam=0.0"

---

ERROR TESTING
-------------

# Missing coordinates
curl "http://localhost:5000/api/test-blocks?llmModel=gemini&llmParam=0.0"
# Expected: 400 "Missing coordinates"

# Missing llmModel
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmParam=0.0"
# Expected: 400 "Testing parameters required"

# Missing llmParam
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini"
# Expected: 400 "Testing parameters required"

# Invalid llmModel
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=invalid&llmParam=0.0"
# Expected: Error "Unknown model: invalid"

---

BATCH TESTING SCRIPT
--------------------

#!/bin/bash
# Save as: test_all_models.sh

LAT=32.7767
LNG=-96.7970
OUTPUT_DIR="./test_results"
mkdir -p $OUTPUT_DIR

echo "Testing Gemini 2.5 Pro..."
curl -s "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=gemini&llmParam=0.0" \
  > $OUTPUT_DIR/gemini_0.0.json

echo "Testing GPT-5 (medium)..."
curl -s "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=gpt-5&llmParam=medium" \
  > $OUTPUT_DIR/gpt5_medium.json

echo "Testing Claude Sonnet 4.5..."
curl -s "http://localhost:5000/api/test-blocks?lat=$LAT&lng=$LNG&llmModel=claude&llmParam=0.0" \
  > $OUTPUT_DIR/claude_0.0.json

echo "All tests complete! Results in $OUTPUT_DIR"

---

PRETTY PRINTING RESULTS
-----------------------

# Pretty print JSON response
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0" | jq '.'

# Extract only block names
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0" | jq '.blocks[].name'

# Extract response time
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0" | jq '.meta.responseTimeMs'

# Count blocks returned
curl "http://localhost:5000/api/test-blocks?lat=32.7767&lng=-96.7970&llmModel=gemini&llmParam=0.0" | jq '.blocks | length'

---

PRODUCTION READINESS CHECK
--------------------------

# Verify all models work
./test_all_models.sh

# Check for JSON parse errors in logs
grep "JSON parse failed" /tmp/logs/Eidolon_Main_*.log

# Check for city hallucinations
grep "CITY MISMATCH" /tmp/logs/Eidolon_Main_*.log

# Verify drive times calculated
grep "min drive" /tmp/logs/Eidolon_Main_*.log

# Check availability enrichment
grep "OPEN\|CLOSED" /tmp/logs/Eidolon_Main_*.log
